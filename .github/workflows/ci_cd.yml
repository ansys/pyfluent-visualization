name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_EXAMPLES_CACHE: 0

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Run code style
        run: make style


  tests:
    name: Tests and coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9']
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pyfluent-visualization
        run: make install
      - name: Test with pytest
        run: make unittest


  docs:
    name: Documentation
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      # used for documentation deployment
      #- name: Get Bot Application Token
      #  #if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      #  id: get_workflow_token
      #  uses: peter-murray/workflow-application-token-action@v1
      #  with:
      #    application_id: ${{ secrets.BOT_APPLICATION_ID }}
      #    application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install pyfluent-visualization
        run: make install

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull Fluent docker image
        run: make docker-pull

      - name: Retrieve pyfluent-visualization version
        run: |
          echo "::set-output name=PYFLUENT_VISUALIZATION_VERSION::$(python -c "from ansys.fluent.visualization import __version__; print(__version__)")"
          echo "pyfluent-visualization version is: $(python -c "from ansys.fluent.visualization import __version__; print(__version__)")"
        id: version

      - name: Cache examples
        uses: actions/cache@v2
        with:
          path: doc/source/examples
          key: Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYFLUENT_VISUALIZATION_VERSION }}-${{ hashFiles('examples/**') }}-${{ github.sha }}
          restore-keys: |
            Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYFLUENT_VISUALIZATION_VERSION }}-${{ hashFiles('examples/**') }}

      - name: Generate the documentation
        run: make build-doc
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
          PYFLUENT_START_INSTANCE: 0

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: HTML-Documentation
          path: doc/_build/html
          retention-days: 7

      - name: Deploy
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          repository-name: pyansys/pyfluent-visualization-docs
          token: ${{ secrets.DOC_DEPLOYMENT_PAT }}
          BRANCH: gh-pages
          FOLDER: doc/_build/html
          CLEAN: true


  build:
    name: Build library
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install dependencies and build the library
        run: |
          python -m pip install --upgrade pip poetry
          python -m pip install -r requirements/requirements_build.txt
          poetry build
          python -m twine check dist/*

      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: PyFluent-packages
          path: |
            dist/*.whl
            dist/*.tar.gz
          retention-days: 7

  release:
    name: Release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display package file list
        run: ls -R

      #- name: Upload to Private PyPi
      #  run: |
      #    pip install twine
      #    python -m twine upload --skip-existing ./**/*.whl
      #    python -m twine upload --skip-existing ./**/*.tar.gz
      #  env:
      #    TWINE_USERNAME: PAT
      #    TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
      #    TWINE_REPOSITORY_URL: https://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
