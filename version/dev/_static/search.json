[
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly\nfamiliar with this guide, paying particular attention to Coding Style,\nbefore attempting to contribute to PyFluent-Visualization.\nThe following contribution information is specific to PyFluent-Visualization.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "To clone and install the latest version of PyFluent-Visualization in\ndevelopment mode, run:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-documentation",
        "title": "Contribute > Build documentation",
        "section": "Build documentation",
        "text": "To build the PyFluent-Visualization documentation locally, in the root\ndirectory of the repository, run:\nAfter the build completes, the HTML documentation is located in the\n_builds/html directory. You can load the index.html in this\ndirectory into a web browser.\nYou can clear all HTML files from the _builds/html directory with:\nBuild documentation\n_builds/html\nindex.html\n_builds/html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyFluent Visualization Issues\npage to submit questions, report bugs, and request new features.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyFluent-Visualization is compliant with the PyAnsys coding style. It uses the\ntool pre-commit to check the code style.\nYou can install and active this tool with:\nYou can then use the style rule defined in Makefile with:\nOr, you can directly run pre-commit with:\nAdhere to code style\nstyle\nMakefile"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "visualization/Pathline",
        "href": "visualization/Pathline.html#pathline",
        "title": "Pathline",
        "section": "Pathline",
        "text": "Bases: _GraphicsContainer\nPathline.\n__init__ method of Pathline class.\nPathline\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Pathline",
        "href": "visualization/Pathline.html#ansys.fluent.visualization.Pathline",
        "title": "Pathline > Pathline > Pathline",
        "section": "Pathline > Pathline",
        "text": "class ansys.fluent.visualization.Pathline(solver, **kwargs)\n\nBases: _GraphicsContainer\n\nPathline.\n\nExamples\n\n>>> from ansys.fluent.visualization import Pathline\n\n>>> # `solver_session` is a live Fluent session with a case\n>>> # and data which contains the following surfaces\n\n>>> pathlines = Pathline(solver=solver_session)\n>>> pathlines.field = \"velocity-magnitude\"\n>>> pathlines.surfaces = [\"inlet\", \"inlet1\", \"inlet2\"]\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, **kwargs)\n\n__init__ method of Pathline class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Pathline",
        "href": "visualization/Pathline.html#ansys.fluent.visualization.Pathline.__init__",
        "title": "Pathline > Pathline > __init__",
        "section": "Pathline > __init__",
        "text": "__init__(solver, **kwargs)\n\n__init__ method of Pathline class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "To run PyFluent-Visualization, you must have a licensed copy of Ansys Fluent\ninstalled locally. PyFluent-Visualization supports Ansys Fluent 2022 R2 and\nlater.\nFor more information on Fluent, visit the Fluent\npage on the Ansys website.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#install-package",
        "title": "Getting started > Install package",
        "section": "Install package",
        "text": "The ansys-fluent-visualization package supports Python 3.10 through\nPython 3.13 on Windows and Linux.\nInstall the latest release from PyPi with:\nAlternatively, install the latest version from the GitHub with:\nIf you plan on doing local development of PyFluent-Visualization with Git,\ninstall with:\nAny changes that you make locally are reflected in your setup after you restart\nthe Python kernel.\nPyFluent-Visualization seamlessly integrates with\nPyVista, Matplotlib\nand Plotly.\nAdditionally, it offers flexibility to integrate other data visualization\ntools.\nInstall package\nansys-fluent-visualization"
    },
    {
        "objectID": "visualization/visualization_contents",
        "href": "visualization/visualization_contents.html#visualization",
        "title": "visualization",
        "section": "visualization",
        "text": "Python post processing integrations for the Fluent solver.\nMethod returning the version of PyFluent being used.\nThe PyFluent version being used.\nstr\nOnly available in packaged versions. Otherwise it will return __version__.\nvisualization\npython:str\nstr"
    },
    {
        "objectID": "visualization/visualization_contents",
        "href": "visualization/visualization_contents.html#ansys.fluent.visualization.version_info",
        "title": "visualization > visualization > version_info",
        "section": "visualization > version_info",
        "text": "ansys.fluent.visualization.version_info()\n\nMethod returning the version of PyFluent being used.\n\nReturns\n\npython:str\n\nThe PyFluent version being used.\n\nReturn type\n\nstr\n\nNotes\n\nOnly available in packaged versions. Otherwise it will return __version__.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "index",
        "href": "index.html#pyfluent-visualization-documentation-021dev1",
        "title": "PyFluent-Visualization documentation 0.21.dev1",
        "section": "PyFluent-Visualization documentation 0.21.dev1",
        "text": "PyFluent-Visualization documentation 0.21.dev1"
    },
    {
        "objectID": "index",
        "href": "index.html#introduction",
        "title": "PyFluent-Visualization documentation 0.21.dev1 > Introduction",
        "section": "Introduction",
        "text": "You can use PyFluent-Visualization to postprocess Fluent results\nto display graphics objects and plot data. With PyFluent-Visualization,\nyou can:\nScript postprocessing using Fluent’s built-in postprocessing capabilities.\nFor more information, see ref_visualization.\nPlot Fluent geometry and meshes using PyVista from within a Python script or an\ninteractive Jupyter notebook.\nAccess Fluent surface-based field data as Python objects via NumPy arrays.\nIntroduction"
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-issues",
        "title": "PyFluent-Visualization documentation 0.21.dev1 > Documentation and issues",
        "section": "Documentation and issues",
        "text": "In addition to installation and usage information, the PyFluent-Visualization\ndocumentation provides ref_example_gallery, and ref_contributing\nsections.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nOn the PyFluent-Visualization Issues\npage, you can create issues to submit questions, reports burgs, and request new features. To reach\nthe project support team, email pyansys.core@ansys.com.\nDocumentation and issues"
    },
    {
        "objectID": "index",
        "href": "index.html#license",
        "title": "PyFluent-Visualization documentation 0.21.dev1 > License",
        "section": "License",
        "text": "PyFluent-Visualization is licensed under the MIT license.\nPyFluent-Visualization makes no commercial claim over Ansys\nwhatsoever. This tool extends the functionality of Ansys Fluent\nby adding a Python interface to Fluent without changing the\ncore behavior or license of the original software. The use of the\ninteractive Fluent control of PyFluent-Visualization requires\na legally licensed local copy of Fluent.\nFor more information about Fluent, visit the Fluent\npage on the Ansys website.\nLicense"
    },
    {
        "objectID": "index",
        "href": "index.html#project-index",
        "title": "PyFluent-Visualization documentation 0.21.dev1 > Project index",
        "section": "Project index",
        "text": "genindex\nProject index"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:56.154 total execution time for 1 file from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-postprocessing_updated_exhaust_manifold_example.py (../../examples/00-postprocessing/updated_exhaust_manifold_example.py)\n01:56.154\n0.0\nComputation times\n../../examples/00-postprocessing/updated_exhaust_manifold_example.py"
    },
    {
        "objectID": "visualization/Surface",
        "href": "visualization/Surface.html#surface",
        "title": "Surface",
        "section": "Surface",
        "text": "Bases: _GraphicsContainer\nSurface.\n__init__ method of Surface class.\nSurface\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Surface",
        "href": "visualization/Surface.html#ansys.fluent.visualization.Surface",
        "title": "Surface > Surface > Surface",
        "section": "Surface > Surface",
        "text": "class ansys.fluent.visualization.Surface(solver, **kwargs)\n\nBases: _GraphicsContainer\n\nSurface.\n\nExamples\n\n>>> from ansys.fluent.visualization import Surface\n\n>>> # `solver_session` is a live Fluent session with a case file loaded\n\n>>> # For plane-surface\n>>> surf_xy_plane = Surface(\n>>>     solver=solver_session,\n>>>     type=\"plane-surface\",\n>>>     creation_method=\"xy-plane\",\n>>>     z=-0.0441921\n>>>     )\n\n>>> # For iso-surface\n>>> surf_outlet_plane = Surface(solver=solver_session)\n>>> surf_outlet_plane.type = \"iso-surface\"\n>>> surf_outlet_plane.field = \"y-coordinate\"\n>>> surf_outlet_plane.iso_value = -0.125017\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, **kwargs)\n\n__init__ method of Surface class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Surface",
        "href": "visualization/Surface.html#ansys.fluent.visualization.Surface.__init__",
        "title": "Surface > Surface > __init__",
        "section": "Surface > __init__",
        "text": "__init__(solver, **kwargs)\n\n__init__ method of Surface class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "PyFluent-Visualization enables post-processing of Fluent results,\nallowing you to display graphical objects and plot data efficiently.\nUser guide"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#launch-fluent-and-read-data",
        "title": "User guide > Launch Fluent and read data",
        "section": "Launch Fluent and read data",
        "text": "Use the following script to launch Fluent and load your case and data files:\nLaunch Fluent and read data"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#graphics-operations",
        "title": "User guide > Graphics operations",
        "section": "Graphics operations",
        "text": "PyFluent-Visualization supports various graphical operations.\nGraphics operations"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-mesh",
        "title": "User guide > Display mesh",
        "section": "Display mesh",
        "text": "The following example demonstrates how to display a mesh with and without edges:\nDisplay mesh"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-plane-surface",
        "title": "User guide > Display plane-surface",
        "section": "Display plane-surface",
        "text": "Create and visualize a plane surface at a specified z-coordinate:\nDisplay plane-surface"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-iso-surface",
        "title": "User guide > Display iso-surface",
        "section": "Display iso-surface",
        "text": "Generate an iso-surface based on the y-coordinate:\nDisplay iso-surface"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-contour",
        "title": "User guide > Display contour",
        "section": "Display contour",
        "text": "Plot a temperature contour over selected surfaces:\nDisplay contour"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-vector",
        "title": "User guide > Display vector",
        "section": "Display vector",
        "text": "Visualize velocity vectors over a selected surface:\nDisplay vector"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-pathlines",
        "title": "User guide > Display pathlines",
        "section": "Display pathlines",
        "text": "Visualize pathlines to analyze flow patterns:\nDisplay pathlines"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#plot-operations",
        "title": "User guide > Plot operations",
        "section": "Plot operations",
        "text": "PyFluent-Visualization supports various plot operations.\nPlot operations"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-plot",
        "title": "User guide > Display plot",
        "section": "Display plot",
        "text": "Generate an XY plot of temperature variations at an outlet:\nDisplay plot"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-solution-residual-plot",
        "title": "User guide > Display solution residual plot",
        "section": "Display solution residual plot",
        "text": "Plot solution residuals:\nDisplay solution residual plot"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#display-solution-monitors-plot",
        "title": "User guide > Display solution monitors plot",
        "section": "Display solution monitors plot",
        "text": "Monitor solution convergence using mass balance and velocity plots:\nDisplay solution monitors plot"
    },
    {
        "objectID": "users_guide/index",
        "href": "users_guide/index.html#interactive-graphics",
        "title": "User guide > Interactive Graphics",
        "section": "Interactive Graphics",
        "text": "The GraphicsWindow class provides functionality for managing and directly\ninteracting with the graphics window. By registering the window with EventsManager,\nyou can dynamically update graphics during runtime and create animations.\nThe following example demonstrates how to update multiple graphics windows\n(contour_window, xy_plot_window, and monitor_window) during different solution\nstages. Graphics updates occur:\nDuring solution initialization\nAt the end of every time step during the calculation\nThese updates are implemented using explicit callback registrations.\nAdditionally, animations can be created from a graphics window.\nThis guide provides a structured approach to using PyFluent-Visualization.\nFor detailed usage of individual modules,\nrefer to the respective module documentation, see ref_visualization.\nInteractive Graphics\nGraphicsWindow\nEventsManager"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#graphicswindow",
        "title": "GraphicsWindow",
        "section": "GraphicsWindow",
        "text": "Bases: object\nCreate a graphics window to perform operations like display,\nsave, animate on graphics and plot objects.\nYou can add graphics objects like mesh, surface or plots and then display it.\nYou can add multiple graphics objects and display as a structured layout.\n__init__ method of GraphicsWindow class.\nAdd graphics-data to a window.\nObject to render in the window.\nPosition of the sub-plot.\nTransparency of the sub-plot.\nNone\nAdd 2D plot-data to a window.\nObject to render in the window.\nPosition of the sub-plot.\nTitle of the sub-plot.\nNone\nAnimate windows.\nSession ID for animating the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are animated.\nIf not implemented.\nNone\nClose windows.\nSession ID for closing the windows that belong only to this session.\nThe default is \"\", in which case the windows in all sessions\nare closed.\nNone\nUpdate the graphics window in real time with respect to the event\nthat is passed as input.\nList of events.\nNone\nRefresh windows.\nSession ID for refreshing the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are refreshed.\nOverlay graphics over existing graphics.\nNone\nReturns the plotter object.\nSave a screenshot of the rendering window as a graphic file.\nPath to save the graphic file to.\nSupported formats are SVG, EPS, PS, PDF, and TEX.\nIf the window does not support the specified format.\nNone\nRender the objects in window and display the same.\nNone\nGraphicsWindow\nobject\nNone\nNone\npython:str\noptional\n\"\"\nNotImplementedError\nNone\npython:str\noptional\n\"\"\nNone\npython:list\nNone\npython:str\noptional\n\"\"\nOptional\nNone\npython:str\nValueError\nNone\nNone"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow",
        "title": "GraphicsWindow > GraphicsWindow > GraphicsWindow",
        "section": "GraphicsWindow > GraphicsWindow",
        "text": "class ansys.fluent.visualization.GraphicsWindow\n\nBases: object\n\nCreate a graphics window to perform operations like display,\nsave, animate on graphics and plot objects.\n\nExamples\n\nYou can add graphics objects like mesh, surface or plots and then display it.\n\n>>> from ansys.fluent.visualization import GraphicsWindow\n\n>>> graphics_window = GraphicsWindow()\n>>> graphics_window.add_graphics(mesh_object)\n>>> graphics_window.show()\n\nYou can add multiple graphics objects and display as a structured layout.\n\n>>> graphics_window = GraphicsWindow()\n>>> graphics_window.add_graphics(mesh_object, position=(0, 0))\n>>> graphics_window.add_graphics(temperature_contour_object, position=(0, 1))\n>>> graphics_window.add_graphics(velocity_vector_object, position=(1, 0))\n>>> graphics_window.add_plot(xy_plot, position=(1, 1))\n>>> graphics_window.show()\n\n!! processed by numpydoc !!\n\n\n\n__init__()\n\n__init__ method of GraphicsWindow class.\n\n!! processed by numpydoc !!\n\n\n\nadd_graphics(graphics_obj, position=(0, 0), opacity=1, **kwargs)\n\nAdd graphics-data to a window.\n\nParameters\n\ngraphics_obj\n\nObject to render in the window.\n\nposition: tuple, optional\n\nPosition of the sub-plot.\n\nopacity: float, optional\n\nTransparency of the sub-plot.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nadd_plot(plot_obj, position=(0, 0), **kwargs)\n\nAdd 2D plot-data to a window.\n\nParameters\n\nplot_obj\n\nObject to render in the window.\n\nposition: tuple, optional\n\nPosition of the sub-plot.\n\ntitle: str, optional\n\nTitle of the sub-plot.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nanimate(session_id='')\n\nAnimate windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for animating the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are animated.\n\nRaises\n\nNotImplementedError\n\nIf not implemented.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nclose(session_id='')\n\nClose windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for closing the windows that belong only to this session.\nThe default is \"\", in which case the windows in all sessions\nare closed.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nreal_time_update(events)\n\nUpdate the graphics window in real time with respect to the event\nthat is passed as input.\n\nParameters\n\nevents\n\npython:list\n\nList of events.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nrefresh(session_id='', overlay=False)\n\nRefresh windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for refreshing the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are refreshed.\n\noverlay\n\nbool, Optional\n\nOverlay graphics over existing graphics.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!\n\n\n\nproperty renderer\n\nReturns the plotter object.\n\n!! processed by numpydoc !!\n\n\n\nsave_graphic(filename)\n\nSave a screenshot of the rendering window as a graphic file.\n\nParameters\n\nfilename\n\npython:str\n\nPath to save the graphic file to.\nSupported formats are SVG, EPS, PS, PDF, and TEX.\n\nRaises\n\nValueError\n\nIf the window does not support the specified format.\n\nReturn type\n\nNone\n\nExamples\n\n>>> import ansys.fluent.core as pyfluent\n>>> from ansys.fluent.core import examples\n>>> from ansys.fluent.visualization import GraphicsWindow, Vector\n>>>\n>>> import_case = examples.download_file(\n>>> file_name=\"exhaust_system.cas.h5\", directory=\"pyfluent/exhaust_system\"\n>>> )\n>>> import_data = examples.download_file(\n>>> file_name=\"exhaust_system.dat.h5\", directory=\"pyfluent/exhaust_system\"\n>>> )\n>>>\n>>> solver_session = pyfluent.launch_fluent()\n>>> solver_session.settings.file.read_case(file_name=import_case)\n>>> solver_session.settings.file.read_data(file_name=import_data)\n>>>\n>>> velocity_vector = Vector(\n>>> solver=solver_session, field=\"pressure\", surfaces=[\"solid_up:1:830\"]\n>>> )\n>>> graphics_window = GraphicsWindow()\n>>> graphics_window.add_graphics(velocity_vector)\n>>> graphics_window.save_graphic(\"saved_vector.svg\")\n\n!! processed by numpydoc !!\n\n\n\nshow(renderer=None)\n\nRender the objects in window and display the same.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.__init__",
        "title": "GraphicsWindow > GraphicsWindow > __init__",
        "section": "GraphicsWindow > __init__",
        "text": "__init__()\n\n__init__ method of GraphicsWindow class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.add_graphics",
        "title": "GraphicsWindow > GraphicsWindow > add_graphics",
        "section": "GraphicsWindow > add_graphics",
        "text": "add_graphics(graphics_obj, position=(0, 0), opacity=1, **kwargs)\n\nAdd graphics-data to a window.\n\nParameters\n\ngraphics_obj\n\nObject to render in the window.\n\nposition: tuple, optional\n\nPosition of the sub-plot.\n\nopacity: float, optional\n\nTransparency of the sub-plot.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.add_plot",
        "title": "GraphicsWindow > GraphicsWindow > add_plot",
        "section": "GraphicsWindow > add_plot",
        "text": "add_plot(plot_obj, position=(0, 0), **kwargs)\n\nAdd 2D plot-data to a window.\n\nParameters\n\nplot_obj\n\nObject to render in the window.\n\nposition: tuple, optional\n\nPosition of the sub-plot.\n\ntitle: str, optional\n\nTitle of the sub-plot.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.animate",
        "title": "GraphicsWindow > GraphicsWindow > animate",
        "section": "GraphicsWindow > animate",
        "text": "animate(session_id='')\n\nAnimate windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for animating the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are animated.\n\nRaises\n\nNotImplementedError\n\nIf not implemented.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.close",
        "title": "GraphicsWindow > GraphicsWindow > close",
        "section": "GraphicsWindow > close",
        "text": "close(session_id='')\n\nClose windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for closing the windows that belong only to this session.\nThe default is \"\", in which case the windows in all sessions\nare closed.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.real_time_update",
        "title": "GraphicsWindow > GraphicsWindow > real_time_update",
        "section": "GraphicsWindow > real_time_update",
        "text": "real_time_update(events)\n\nUpdate the graphics window in real time with respect to the event\nthat is passed as input.\n\nParameters\n\nevents\n\npython:list\n\nList of events.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.refresh",
        "title": "GraphicsWindow > GraphicsWindow > refresh",
        "section": "GraphicsWindow > refresh",
        "text": "refresh(session_id='', overlay=False)\n\nRefresh windows.\n\nParameters\n\nsession_id\n\npython:str, optional\n\nSession ID for refreshing the windows that belong only to this\nsession. The default is \"\", in which case the windows in all\nsessions are refreshed.\n\noverlay\n\nbool, Optional\n\nOverlay graphics over existing graphics.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.renderer",
        "title": "GraphicsWindow > GraphicsWindow > renderer",
        "section": "GraphicsWindow > renderer",
        "text": "property renderer\n\nReturns the plotter object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.save_graphic",
        "title": "GraphicsWindow > GraphicsWindow > save_graphic",
        "section": "GraphicsWindow > save_graphic",
        "text": "save_graphic(filename)\n\nSave a screenshot of the rendering window as a graphic file.\n\nParameters\n\nfilename\n\npython:str\n\nPath to save the graphic file to.\nSupported formats are SVG, EPS, PS, PDF, and TEX.\n\nRaises\n\nValueError\n\nIf the window does not support the specified format.\n\nReturn type\n\nNone\n\nExamples\n\n>>> import ansys.fluent.core as pyfluent\n>>> from ansys.fluent.core import examples\n>>> from ansys.fluent.visualization import GraphicsWindow, Vector\n>>>\n>>> import_case = examples.download_file(\n>>> file_name=\"exhaust_system.cas.h5\", directory=\"pyfluent/exhaust_system\"\n>>> )\n>>> import_data = examples.download_file(\n>>> file_name=\"exhaust_system.dat.h5\", directory=\"pyfluent/exhaust_system\"\n>>> )\n>>>\n>>> solver_session = pyfluent.launch_fluent()\n>>> solver_session.settings.file.read_case(file_name=import_case)\n>>> solver_session.settings.file.read_data(file_name=import_data)\n>>>\n>>> velocity_vector = Vector(\n>>> solver=solver_session, field=\"pressure\", surfaces=[\"solid_up:1:830\"]\n>>> )\n>>> graphics_window = GraphicsWindow()\n>>> graphics_window.add_graphics(velocity_vector)\n>>> graphics_window.save_graphic(\"saved_vector.svg\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/GraphicsWindow",
        "href": "visualization/GraphicsWindow.html#ansys.fluent.visualization.GraphicsWindow.show",
        "title": "GraphicsWindow > GraphicsWindow > show",
        "section": "GraphicsWindow > show",
        "text": "show(renderer=None)\n\nRender the objects in window and display the same.\n\nReturn type\n\nNone\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Vector",
        "href": "visualization/Vector.html#vector",
        "title": "Vector",
        "section": "Vector",
        "text": "Bases: _GraphicsContainer\nVector.\n__init__ method of Vector class.\nVector\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Vector",
        "href": "visualization/Vector.html#ansys.fluent.visualization.Vector",
        "title": "Vector > Vector > Vector",
        "section": "Vector > Vector",
        "text": "class ansys.fluent.visualization.Vector(solver, **kwargs)\n\nBases: _GraphicsContainer\n\nVector.\n\nExamples\n\n>>> from ansys.fluent.visualization import Vector\n\n>>> # `solver_session` is a live Fluent session with a case\n>>> # and data which contains the following surfaces\n\n>>> velocity_vector_object = Vector(\n>>>     solver=solver_session,\n>>>     field=\"x-velocity\",\n>>>     surfaces=[\"solid_up:1:830\"],\n>>>     scale=2,\n>>> )\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, **kwargs)\n\n__init__ method of Vector class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Vector",
        "href": "visualization/Vector.html#ansys.fluent.visualization.Vector.__init__",
        "title": "Vector > Vector > __init__",
        "section": "Vector > __init__",
        "text": "__init__(solver, **kwargs)\n\n__init__ method of Vector class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#postprocessing-examples",
        "title": "Examples > Postprocessing examples",
        "section": "Postprocessing examples",
        "text": "These examples show how to use external packages to postprocess Fluent\nresults.\nsphx_glr_examples_00-postprocessing_updated_exhaust_manifold_example.py\nGallery generated by Sphinx-Gallery\nPostprocessing examples"
    },
    {
        "objectID": "visualization/Monitor",
        "href": "visualization/Monitor.html#monitor",
        "title": "Monitor",
        "section": "Monitor",
        "text": "Bases: _GraphicsContainer\nMonitor.\n__init__ method of Monitor class.\nMonitor\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Monitor",
        "href": "visualization/Monitor.html#ansys.fluent.visualization.Monitor",
        "title": "Monitor > Monitor > Monitor",
        "section": "Monitor > Monitor",
        "text": "class ansys.fluent.visualization.Monitor(solver, local_surfaces_provider=None, **kwargs)\n\nBases: _GraphicsContainer\n\nMonitor.\n\nExamples\n\n>>> from ansys.fluent.visualization import Monitor\n\n>>> residual = Monitor(solver=solver_session)\n>>> residual.monitor_set_name = \"residual\"\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, local_surfaces_provider=None, **kwargs)\n\n__init__ method of Monitor class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Monitor",
        "href": "visualization/Monitor.html#ansys.fluent.visualization.Monitor.__init__",
        "title": "Monitor > Monitor > __init__",
        "section": "Monitor > __init__",
        "text": "__init__(solver, local_surfaces_provider=None, **kwargs)\n\n__init__ method of Monitor class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#enhanced-postprocessing-with-pyvista-and-matplotlib",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib",
        "section": "Enhanced Postprocessing with PyVista and Matplotlib",
        "text": "This updated example demonstrates postprocessing capabilities in PyFluent\nusing an object-oriented approach, providing a more user-friendly interface\nand improved flexibility.\nThe 3D model used in this example is an exhaust manifold, where high-temperature\nturbulent flows are analyzed in a conjugate heat transfer scenario.\nKey Improvements:\nObject-Oriented Design: The code has been modularized into classes and methods,\nenhancing maintainability and reusability.\nInteractive User Interface: The user interface now allows seamless interaction,\nenabling users to control and customize postprocessing parameters.\nEnhanced Plot Interaction: Users have greater freedom to interact with the plots,\nsuch as adding and super-imposing multiple plots, and toggling data views,\nenhancing the visualization experience.\nThis example utilizes PyVista for 3D visualization and Matplotlib for 2D data plotting.\nThe new design provides a streamlined workflow for exploring and analyzing\nthe temperature and flow characteristics in the exhaust manifold.\nEnhanced Postprocessing with PyVista and Matplotlib"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#perform-required-imports",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform required imports and set the configuration.\nPerform required imports"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#download-files-and-launch-fluent",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Download files and launch Fluent",
        "section": "Download files and launch Fluent",
        "text": "Download the case and data files and launch Fluent as a service in solver\nmode with double precision and two processors. Read in the case and data\nfiles.\nDownload files and launch Fluent"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-graphics-object-for-mesh-display",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create graphics object for mesh display",
        "section": "Create graphics object for mesh display",
        "text": "Create a graphics object for the mesh display.\nCreate graphics object for mesh display"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-plane-surface-xy-plane",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create plane-surface XY plane",
        "section": "Create plane-surface XY plane",
        "text": "Create a plane-surface XY plane.\nCreate plane-surface XY plane"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-plane-surface-yz-plane",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create plane-surface YZ plane",
        "section": "Create plane-surface YZ plane",
        "text": "Create a plane-surface YZ plane.\nCreate plane-surface YZ plane"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-plane-surface-zx-plane",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create plane-surface ZX plane",
        "section": "Create plane-surface ZX plane",
        "text": "Create a plane-surface ZX plane.\nCreate plane-surface ZX plane"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-iso-surface-on-outlet-plane",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create iso-surface on outlet plane",
        "section": "Create iso-surface on outlet plane",
        "text": "Create an iso-surface on the outlet plane.\nCreate iso-surface on outlet plane"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-iso-surface-on-mid-plane",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create iso-surface on mid-plane",
        "section": "Create iso-surface on mid-plane",
        "text": "Create an iso-surface on the mid-plane.\nCreate iso-surface on mid-plane"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-iso-surface-using-velocity-magnitude",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create iso-surface using velocity magnitude",
        "section": "Create iso-surface using velocity magnitude",
        "text": "Create an iso-surface using the velocity magnitude.\nCreate iso-surface using velocity magnitude"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-temperature-contour-on-mid-plane-and-outlet",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create temperature contour on mid-plane and outlet",
        "section": "Create temperature contour on mid-plane and outlet",
        "text": "Create a temperature contour on the mid-plane and the outlet.\nCreate temperature contour on mid-plane and outlet"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-contour-plot-of-temperature-on-manifold",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create contour plot of temperature on manifold",
        "section": "Create contour plot of temperature on manifold",
        "text": "Create a contour plot of the temperature on the manifold.\nCreate contour plot of temperature on manifold"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-vector",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create vector",
        "section": "Create vector",
        "text": "Create a vector on a predefined surface.\nCreate vector"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-pathlines",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create Pathlines",
        "section": "Create Pathlines",
        "text": "Create a pathlines on a predefined surface.\nCreate Pathlines"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-xy-plot",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create XY plot",
        "section": "Create XY plot",
        "text": "Create the default XY plot.\nCreate XY plot"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#create-residual-plot",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Create residual plot",
        "section": "Create residual plot",
        "text": "Create and display the residual plot.\nCreate residual plot"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#solve-and-plot-solution-monitors",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Solve and plot solution monitors",
        "section": "Solve and plot solution monitors",
        "text": "Solve and plot solution monitors.\nSolve and plot solution monitors"
    },
    {
        "objectID": "examples/00-postprocessing/updated_exhaust_manifold_example",
        "href": "examples/00-postprocessing/updated_exhaust_manifold_example.html#close-fluent",
        "title": "Enhanced Postprocessing with PyVista and Matplotlib > Close Fluent",
        "section": "Close Fluent",
        "text": "Close Fluent.\nTotal running time of the script: (1 minutes 56.154 seconds)\nDownload Jupyter notebook: updated_exhaust_manifold_example.ipynb\nDownload Python source code: updated_exhaust_manifold_example.py\nDownload zipped: updated_exhaust_manifold_example.zip\nGallery generated by Sphinx-Gallery\nClose Fluent\nDownload Jupyter notebook: updated_exhaust_manifold_example.ipynb\nDownload Python source code: updated_exhaust_manifold_example.py\nDownload zipped: updated_exhaust_manifold_example.zip"
    },
    {
        "objectID": "visualization/Mesh",
        "href": "visualization/Mesh.html#mesh",
        "title": "Mesh",
        "section": "Mesh",
        "text": "Bases: _GraphicsContainer\nMesh.\n__init__ method of Mesh class.\nMesh\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Mesh",
        "href": "visualization/Mesh.html#ansys.fluent.visualization.Mesh",
        "title": "Mesh > Mesh > Mesh",
        "section": "Mesh > Mesh",
        "text": "class ansys.fluent.visualization.Mesh(solver, **kwargs)\n\nBases: _GraphicsContainer\n\nMesh.\n\nExamples\n\n>>> from ansys.fluent.visualization import Mesh\n\n>>> # `solver_session` is a live Fluent session with a case\n>>> # and data which contains the following surfaces\n\n>>> mesh = Mesh(\n>>>     solver=solver_session, show_edges=True, surfaces=[\"in1\", \"in2\", \"in3\"]\n>>> )\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, **kwargs)\n\n__init__ method of Mesh class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Mesh",
        "href": "visualization/Mesh.html#ansys.fluent.visualization.Mesh.__init__",
        "title": "Mesh > Mesh > __init__",
        "section": "Mesh > __init__",
        "text": "__init__(solver, **kwargs)\n\n__init__ method of Mesh class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Contour",
        "href": "visualization/Contour.html#contour",
        "title": "Contour",
        "section": "Contour",
        "text": "Bases: _GraphicsContainer\nContour.\n__init__ method of Contour class.\nContour\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/Contour",
        "href": "visualization/Contour.html#ansys.fluent.visualization.Contour",
        "title": "Contour > Contour > Contour",
        "section": "Contour > Contour",
        "text": "class ansys.fluent.visualization.Contour(solver, **kwargs)\n\nBases: _GraphicsContainer\n\nContour.\n\nExamples\n\n>>> from ansys.fluent.visualization import Contour\n\n>>> # `solver_session` is a live Fluent session with a case\n>>> # and data which contains the following surfaces\n\n>>> temperature_contour_object = Contour(\n>>>     solver=solver_session, field=\"temperature\", surfaces=[\"in1\", \"in2\", \"in3\",]\n>>> )\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, **kwargs)\n\n__init__ method of Contour class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/Contour",
        "href": "visualization/Contour.html#ansys.fluent.visualization.Contour.__init__",
        "title": "Contour > Contour > __init__",
        "section": "Contour > __init__",
        "text": "__init__(solver, **kwargs)\n\n__init__ method of Contour class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "users_guide/integration",
        "href": "users_guide/integration.html#integrating-custom-rendering-libraries-with-pyfluent-visualization",
        "title": "Integrating Custom Rendering Libraries with PyFluent-Visualization",
        "section": "Integrating Custom Rendering Libraries with PyFluent-Visualization",
        "text": "Coming soon.\nIntegrating Custom Rendering Libraries with PyFluent-Visualization"
    },
    {
        "objectID": "examples/00-postprocessing/index",
        "href": "examples/00-postprocessing/index.html#postprocessing-examples",
        "title": "Postprocessing examples",
        "section": "Postprocessing examples",
        "text": "These examples show how to use external packages to postprocess Fluent\nresults.\nsphx_glr_examples_00-postprocessing_updated_exhaust_manifold_example.py\nPostprocessing examples"
    },
    {
        "objectID": "examples/00-postprocessing/sg_execution_times",
        "href": "examples/00-postprocessing/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "01:56.154 total execution time for 1 file from examples/00-postprocessing:\nExample\nTime\nMem (MB)\nsphx_glr_examples_00-postprocessing_updated_exhaust_manifold_example.py (updated_exhaust_manifold_example.py)\n01:56.154\n0.0\nComputation times\nupdated_exhaust_manifold_example.py"
    },
    {
        "objectID": "visualization/XYPlot",
        "href": "visualization/XYPlot.html#xyplot",
        "title": "XYPlot",
        "section": "XYPlot",
        "text": "Bases: _GraphicsContainer\nXYPlot.\n__init__ method of XYPlot class.\nXYPlot\n_GraphicsContainer"
    },
    {
        "objectID": "visualization/XYPlot",
        "href": "visualization/XYPlot.html#ansys.fluent.visualization.XYPlot",
        "title": "XYPlot > XYPlot > XYPlot",
        "section": "XYPlot > XYPlot",
        "text": "class ansys.fluent.visualization.XYPlot(solver, local_surfaces_provider=None, **kwargs)\n\nBases: _GraphicsContainer\n\nXYPlot.\n\nExamples\n\n>>> from ansys.fluent.visualization import XYPlot\n\n>>> xy_plot = XYPlot(\n>>>     solver=solver_session,\n>>>     surfaces=[\"outlet\"],\n>>>     y_axis_function=\"temperature\",\n>>> )\n\n!! processed by numpydoc !!\n\n\n\n__init__(solver, local_surfaces_provider=None, **kwargs)\n\n__init__ method of XYPlot class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "visualization/XYPlot",
        "href": "visualization/XYPlot.html#ansys.fluent.visualization.XYPlot.__init__",
        "title": "XYPlot > XYPlot > __init__",
        "section": "XYPlot > __init__",
        "text": "__init__(solver, local_surfaces_provider=None, **kwargs)\n\n__init__ method of XYPlot class.\n\n!! processed by numpydoc !!"
    }
]